class Solution {
public:
    int solveoptimal(vector<int> &nums){
        if(nums.size()==0) return 0;
        vector<int> ans;
        ans.push_back(nums[0]);
        for(int i=1;i<nums.size();i++){
            if(nums[i]>ans.back()){
                ans.push_back(nums[i]);
            }else{
                int index=lower_bound(ans.begin(),ans.end(),nums[i])-ans.begin();
                ans[index]=nums[i];
            }
        }
        return ans.size();
    }
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        sort(envelopes.begin(), envelopes.end(), [](const vector<int>& a, const vector<int>& b) {
            return (a[0] == b[0]) ? (a[1] > b[1]) : (a[0] < b[0]);
        });
        vector<int> heights;
        for(const auto &it:envelopes){
            heights.push_back(it[1]);
        }
        return solveoptimal(heights);
    }
};
